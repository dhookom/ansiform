pipeline {
    agent any // Or a specific agent if you have one configured

    // 1. Define parameters for the Jenkins job
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Terraform action: apply or destroy')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'The AWS region to deploy resources in.')
        string(name: 'INSTANCE_TYPE', defaultValue: 't2.micro', description: 'The EC2 instance type.')
        string(name: 'AMI_ID', defaultValue: 'ami-0a7d80731ae1b2435', description: 'The AMI ID for the EC2 instance x86.')
        string(name: 'KEY_NAME', defaultValue: 'my-ansible-key', description: 'The name of the SSH key pair in AWS.')
    }

    // 2. Set environment variables from Jenkins credentials and parameters
    environment {
        // Retrieve AWS credentials from Jenkins Credentials (IDs from Step 2)
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        // Pass Jenkins parameters as environment variables to Terraform
        TF_VAR_aws_region     = "${params.AWS_REGION}"      // <-- Corrected syntax
        TF_VAR_instance_type  = "${params.INSTANCE_TYPE}"   // <-- Corrected syntax
        TF_VAR_ami_id         = "${params.AMI_ID}"          // <-- Corrected syntax
        TF_VAR_key_name       = "${params.KEY_NAME}"        // <-- Corrected syntax
        // Other environment variables for Ansible (if needed)
        ANSIBLE_HOST_KEY_CHECKING = 'False' // WARNING: Use this only for practice!
    }

    // 3. Define the pipeline stages
    stages {
        stage('Checkout Code') {
            steps {
                // This step is configured in the Jenkins job settings, not the Jenkinsfile itself
                // but this stage is where the code from your git repo will be checked out.
                echo "Checking out code from Git..."
                // The 'git' SCM is typically configured in the job's settings.
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') { // Change to the terraform directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply / Destroy') {
            // This stage only runs if the 'ACTION' parameter is 'apply' or 'destroy'
            when { expression { params.ACTION == 'apply' || params.ACTION == 'destroy' } }
            steps {
                script {
                    dir('terraform') {
                        if (params.ACTION == 'apply') {
                            sh 'terraform apply -auto-approve tfplan'
                            // Capture the public IP from Terraform output for the next stage
                            def instanceIp = sh(returnStdout: true, script: 'terraform output -raw instance_public_ip').trim()
                            echo "VM Public IP: ${instanceIp}"
                            env.VM_PUBLIC_IP = instanceIp // Store IP in an environment variable
                        } else if (params.ACTION == 'destroy') {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Ansible Configuration') {
            // This stage only runs if the 'ACTION' is 'apply'
            when { expression { params.ACTION == 'apply' } }
            steps {
                // Use the Jenkins SSH Agent plugin to securely provide the private key
                // The ID 'ansible-vm-ssh-key' must match the Jenkins SSH credentials ID you created.
                sshagent(credentials: ['ansible-vm-ssh-key']) {
                    dir('ansible') { // Change to the ansible directory
                        sh 'ansible-inventory -i inventory/aws_ec2.yml --list' // Verify dynamic inventory discovers the VM
                        sh 'ansible-playbook -i inventory/aws_ec2.yml playbooks/vm_config.yml'
                    }
                }
            }
        }

        stage('Verification') {
            // This stage only runs if the 'ACTION' is 'apply'
            when { expression { params.ACTION == 'apply' } }
            steps {
                echo "Verify Nginx by visiting: http://${env.VM_PUBLIC_IP}"
                // Add a simple curl test for automated verification
                sh "curl --fail --show-error http://${env.VM_PUBLIC_IP} | grep 'Hello from your Jenkins-provisioned'"
            }
        }
    }

    // 4. Define post-build actions for success or failure
    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline succeeded!'
            // Add notification steps here (e.g., Slack, email)
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
            // Add notification steps here
        }
    }
}
